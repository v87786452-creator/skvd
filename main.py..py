import telebot
from telebot import types
import datetime

TOKEN = "8242446491:AAFwVqXnaB_iyJWfgH5HFO5EsPqYHwFwIWk"
ADMIN_ID = 5695898938  # —Ç–≤–æ–π Telegram ID

bot = telebot.TeleBot(TOKEN, parse_mode="HTML")

# ------------------- –î–ê–ù–ù–´–ï -------------------
vip_users = {}          # user_id: {"until": datetime, "status": "week"/"month"/"forever"}
blocked_users = {}      # user_id: datetime –æ–∫–æ–Ω—á–∞–Ω–∏—è –±–∞–Ω–∞
search_queue = []       # –æ—á–µ—Ä–µ–¥—å –Ω–∞ –ø–æ–∏—Å–∫ —Å–æ–±–µ—Å–µ–¥–Ω–∏–∫–∞
chat_pairs = {}         # user_id: partner_id
awaiting_vip_screen = set()  # –∫—Ç–æ –¥–æ–ª–∂–µ–Ω –æ—Ç–ø—Ä–∞–≤–∏—Ç—å —Å–∫—Ä–∏–Ω –ø–æ—Å–ª–µ –æ–ø–ª–∞—Ç—ã

# –ü–ª–æ—Ö–∏–µ —Å–ª–æ–≤–∞
bad_words = [
    "—Ö—É–π", "–ø–∏–∑–¥–∞", "–µ–±–∞—Ç—å", "—Å—É–∫–∞", "–±–ª—è—Ç—å", "–Ω–∞—Ö—É–π", "—á–º–æ", "–º—Ä–∞–∑—å", "–ø–∏–¥–æ—Ä", "—É—ë–±–æ–∫",
    "–¥–∞—É–Ω", "–¥–æ–ª–±–æ—ë–±", "–≥–æ–Ω–¥–æ–Ω", "–∑–∞–ª—É–ø–∞", "—à–ª—é—Ö–∞", "–ø—Ä–æ—Å—Ç–∏—Ç—É—Ç–∫–∞", "–º—É–¥–∞–∫", "–≥–∞–Ω–¥–æ–Ω", "–µ–±–ª–∞–Ω", "–∏–¥–∏–æ—Ç",
    "fuck", "shit", "bitch", "asshole", "motherfucker", "cunt", "bastard", "slut", "whore", "faggot",
    "–∫—Ä–µ—Ç–∏–Ω", "—É–±–ª—é–¥–æ–∫", "–ª–æ—Ö", "–≥–Ω–∏–¥–∞", "–∫–æ–∑—ë–ª", "—á—ë—Ä—Ç", "—Ç–≤–∞—Ä—å", "–≥–æ–≤–Ω–æ", "–µ–±–ª–æ", "–∂–æ–ø–∞",
    "—Å–∏—Å—å–∫–∏", "–∂–æ–ø—É", "–∫–∏—Å–∫—É", "–ø–æ–ø–∫—É", "–ø–∏–∑–¥—É"
]

# ------------------- VIP -------------------
def is_vip(user_id):
    if user_id not in vip_users:
        return False
    if vip_users[user_id]["until"] is None:
        return True
    if datetime.datetime.now() < vip_users[user_id]["until"]:
        return True
    else:
        del vip_users[user_id]
        return False

# ------------------- –°–¢–ê–†–¢ -------------------
@bot.message_handler(commands=["start"])
def start(message):
    markup = types.ReplyKeyboardMarkup(resize_keyboard=True)
    search_btn = types.KeyboardButton("üîé –ü–æ–∏—Å–∫ —Å–æ–±–µ—Å–µ–¥–Ω–∏–∫–∞")
    vip_btn = types.KeyboardButton("üí≥ –û–ø–ª–∞—Ç–∏—Ç—å VIP")
    help_btn = types.KeyboardButton("‚ÑπÔ∏è –ü–æ–º–æ—â—å")
    stop_btn = types.KeyboardButton("‚õî –°—Ç–æ–ø")
    markup.add(search_btn, vip_btn, help_btn, stop_btn)

    text = (
        "–ü—Ä–∏–≤–µ—Çüëã –≠—Ç–æ –ê–Ω–æ–Ω–∏–º–Ω—ã–π —á–∞—Ç!\n\n"
        "–ß—Ç–æ–±—ã –æ–±—â–∞—Ç—å—Å—è –∏ –Ω–∞–π—Ç–∏ —Å–æ–±–µ—Å–µ–¥–Ω–∏–∫–∞, –Ω–∞–∂–º–∏ <b>üîé –ü–æ–∏—Å–∫ —Å–æ–±–µ—Å–µ–¥–Ω–∏–∫–∞</b>\n"
        "‚ÑπÔ∏è –ü–æ–º–æ—â—å –ø–æ –±–æ—Ç—É ‚Äî /help\n"
        "üíé –ß—Ç–æ–±—ã –æ–±—â–∞—Ç—å—Å—è –±–µ–∑ –æ–≥—Ä–∞–Ω–∏—á–µ–Ω–∏–π, –∫—É–ø–∏ VIP ‚Äî /vip"
    )
    bot.send_message(message.chat.id, text, reply_markup=markup)

# ------------------- –ü–û–ú–û–©–¨ -------------------
@bot.message_handler(commands=["help"])
def help_menu(message):
    bot.send_message(message.chat.id,
                     "‚ÑπÔ∏è –ò—Å–ø–æ–ª—å–∑—É–π –∫–Ω–æ–ø–∫–∏:\n\n"
                     "üîé –ü–æ–∏—Å–∫ —Å–æ–±–µ—Å–µ–¥–Ω–∏–∫–∞ ‚Äî –Ω–∞–π—Ç–∏ –Ω–æ–≤–æ–≥–æ —Å–æ–±–µ—Å–µ–¥–Ω–∏–∫–∞\n"
                     "‚õî –°—Ç–æ–ø ‚Äî –∑–∞–∫–æ–Ω—á–∏—Ç—å –¥–∏–∞–ª–æ–≥\n"
                     "üí≥ –û–ø–ª–∞—Ç–∏—Ç—å VIP ‚Äî –∫—É–ø–∏—Ç—å VIP\n\n"
                     "‚ùó –ü—Ä–∏ –Ω–∞—Ä—É—à–µ–Ω–∏—è—Ö ‚Äî –±–∞–Ω –Ω–∞ 1 –¥–µ–Ω—å (–±–µ–∑ VIP)")

# ------------------- VIP -------------------
@bot.message_handler(func=lambda msg: msg.text == "üí≥ –û–ø–ª–∞—Ç–∏—Ç—å VIP" or msg.text == "/vip")
def buy_vip(message):
    text = (
        "üìå –¢–∞—Ä–∏—Ñ—ã VIP:\n\n"
        "‚ñ´Ô∏è 1 –Ω–µ–¥–µ–ª—è ‚Äî 100 ‚ÇΩ\n"
        "‚ñ´Ô∏è 1 –º–µ—Å—è—Ü ‚Äî 350 ‚ÇΩ\n"
        "‚ñ´Ô∏è –ù–∞–≤—Å–µ–≥–¥–∞ ‚Äî 1500 ‚ÇΩ\n\n"
        "üí≥ –†–µ–∫–≤–∏–∑–∏—Ç—ã –¥–ª—è –æ–ø–ª–∞—Ç—ã:\n"
        "<code>2202 2069 0937 4519</code> (–°–±–µ—Ä–±–∞–Ω–∫)\n\n"
        "–ü–æ—Å–ª–µ –æ–ø–ª–∞—Ç—ã –æ—Ç–ø—Ä–∞–≤—å —Å–∫—Ä–∏–Ω—à–æ—Ç —Å—é–¥–∞ ‚úÖ"
    )
    awaiting_vip_screen.add(message.chat.id)
    bot.send_message(message.chat.id, text)

@bot.message_handler(content_types=["photo"])
def handle_photo(message):
    user_id = message.chat.id
    if user_id in awaiting_vip_screen:
        bot.forward_message(ADMIN_ID, user_id, message.message_id)
        bot.send_message(ADMIN_ID, f"üì© –°–∫—Ä–∏–Ω –æ–ø–ª–∞—Ç—ã –æ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è ID: <code>{user_id}</code>")
        bot.send_message(user_id, "‚úÖ –°–∫—Ä–∏–Ω –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω –∞–¥–º–∏–Ω—É, –æ–∂–∏–¥–∞–π –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è!")
        awaiting_vip_screen.remove(user_id)
    else:
        bot.send_message(user_id, "üì∑ –§–æ—Ç–æ –Ω–µ –ø—Ä–∏–Ω–∏–º–∞–µ—Ç—Å—è –∑–¥–µ—Å—å. –ò—Å–ø–æ–ª—å–∑—É–π —Ç–æ–ª—å–∫–æ –ø–æ—Å–ª–µ –æ–ø–ª–∞—Ç—ã VIP!")

@bot.message_handler(commands=["approve"])
def approve_payment(message):
    if message.chat.id != ADMIN_ID:
        return
    try:
        parts = message.text.split()
        if len(parts) < 3:
            bot.send_message(ADMIN_ID, "‚ùå –ò—Å–ø–æ–ª—å–∑—É–π: /approve <user_id> <week|month|forever>")
            return

        user_id = int(parts[1])
        tariff = parts[2]

        if tariff == "week":
            until = datetime.datetime.now() + datetime.timedelta(days=7)
        elif tariff == "month":
            until = datetime.datetime.now() + datetime.timedelta(days=30)
        elif tariff == "forever":
            until = None
        else:
            bot.send_message(ADMIN_ID, "‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π —Ç–∞—Ä–∏—Ñ. week/month/forever")
            return

        vip_users[user_id] = {"until": until, "status": tariff}
        bot.send_message(user_id, f"‚úÖ –¢–µ–±–µ –≤—ã–¥–∞–Ω VIP ({tariff})! –ü—Ä–∏—è—Ç–Ω–æ–≥–æ –æ–±—â–µ–Ω–∏—è üéâ")
        bot.send_message(ADMIN_ID, f"–í—ã–¥–∞–ª VIP {tariff} –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é {user_id}")
    except Exception as e:
        bot.send_message(ADMIN_ID, f"‚ö† –û—à–∏–±–∫–∞: {e}")

# ------------------- –ü–û–ò–°–ö -------------------
@bot.message_handler(func=lambda msg: msg.text == "üîé –ü–æ–∏—Å–∫ —Å–æ–±–µ—Å–µ–¥–Ω–∏–∫–∞")
def find_partner(message):
    user_id = message.chat.id

    if user_id in blocked_users and datetime.datetime.now() < blocked_users[user_id]:
        bot.send_message(user_id, "‚õî –¢—ã –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω –Ω–∞ 1 –¥–µ–Ω—å –∑–∞ –Ω–∞—Ä—É—à–µ–Ω–∏—è.")
        return

    if user_id in search_queue or user_id in chat_pairs:
        bot.send_message(user_id, "‚è≥ –¢—ã —É–∂–µ –≤ –ø–æ–∏—Å–∫–µ –∏–ª–∏ –≤ —á–∞—Ç–µ.")
        return

    if search_queue:
        partner_id = search_queue.pop(0)
        if partner_id in blocked_users and datetime.datetime.now() < blocked_users[partner_id]:
            bot.send_message(user_id, "‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –Ω–∞–π—Ç–∏ —Å–æ–±–µ—Å–µ–¥–Ω–∏–∫–∞, –ø–æ–ø—Ä–æ–±—É–π –ø–æ–∑–∂–µ.")
            return

        chat_pairs[user_id] = partner_id
        chat_pairs[partner_id] = user_id

        bot.send_message(user_id, "‚úÖ –°–æ–±–µ—Å–µ–¥–Ω–∏–∫ –Ω–∞–π–¥–µ–Ω!\n\n/next ‚Äî –∏—Å–∫–∞—Ç—å –Ω–æ–≤–æ–≥–æ\n/stop ‚Äî –∑–∞–∫–æ–Ω—á–∏—Ç—å –¥–∏–∞–ª–æ–≥")
        bot.send_message(partner_id, "‚úÖ –°–æ–±–µ—Å–µ–¥–Ω–∏–∫ –Ω–∞–π–¥–µ–Ω!\n\n/next ‚Äî –∏—Å–∫–∞—Ç—å –Ω–æ–≤–æ–≥–æ\n/stop ‚Äî –∑–∞–∫–æ–Ω—á–∏—Ç—å –¥–∏–∞–ª–æ–≥")
    else:
        search_queue.append(user_id)
        bot.send_message(user_id, "üîé –ü–æ–∏—Å–∫ —Å–æ–±–µ—Å–µ–¥–Ω–∏–∫–∞...")

# ------------------- –°–¢–û–ü -------------------
@bot.message_handler(commands=["stop"])
@bot.message_handler(func=lambda msg: msg.text == "‚õî –°—Ç–æ–ø")
def stop_chat(message):
    user_id = message.chat.id
    if user_id in chat_pairs:
        partner_id = chat_pairs[user_id]
        bot.send_message(partner_id, "‚ùå –°–æ–±–µ—Å–µ–¥–Ω–∏–∫ –≤—ã—à–µ–ª –∏–∑ —á–∞—Ç–∞.")
        del chat_pairs[partner_id]
        del chat_pairs[user_id]
    else:
        bot.send_message(user_id, "‚ùå –¢—ã –Ω–µ –≤ —á–∞—Ç–µ.")

# ------------------- –ê–î–ú–ò–ù-–ü–ê–ù–ï–õ–¨ -------------------
@bot.message_handler(commands=["admin"])
def admin_panel(message):
    if message.chat.id != ADMIN_ID:
        return
    markup = types.ReplyKeyboardMarkup(resize_keyboard=True)
    markup.add("üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞", "üì¢ –†–∞—Å—Å—ã–ª–∫–∞")
    markup.add("üîí –ó–∞–±–∞–Ω–∏—Ç—å", "üîì –†–∞–∑–±–∞–Ω–∏—Ç—å")
    markup.add("üëÅ –û–Ω–ª–∞–π–Ω", "‚¨ÖÔ∏è –í—ã–π—Ç–∏")
    bot.send_message(ADMIN_ID, "‚öôÔ∏è –ê–¥–º–∏–Ω-–ø–∞–Ω–µ–ª—å:", reply_markup=markup)

# ------------------- –°–¢–ê–¢–ò–°–¢–ò–ö–ê -------------------
@bot.message_handler(func=lambda msg: msg.chat.id == ADMIN_ID and msg.text == "üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞")
def admin_stats(message):
    online_users = len(search_queue) + len(chat_pairs)
    bot.send_message(ADMIN_ID,
                     f"üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞:\n\n"
                     f"üë• VIP: {len(vip_users)}\n"
                     f"‚õî –ë–∞–Ω: {len(blocked_users)}\n"
                     f"üîé –í –ø–æ–∏—Å–∫–µ: {len(search_queue)}\n"
                     f"üí¨ –í —á–∞—Ç–µ: {len(chat_pairs)//2}\n"
                     f"üü¢ –û–Ω–ª–∞–π–Ω: {online_users}")

# ------------------- –°–ü–ò–°–û–ö –û–ù–õ–ê–ô–ù–ê -------------------
@bot.message_handler(func=lambda msg: msg.chat.id == ADMIN_ID and msg.text == "üëÅ –û–Ω–ª–∞–π–Ω")
def admin_online(message):
    online = set(search_queue + list(chat_pairs.keys()))
    if not online:
        bot.send_message(ADMIN_ID, "üü¢ –°–µ–π—á–∞—Å –Ω–∏–∫–æ–≥–æ –æ–Ω–ª–∞–π–Ω –Ω–µ—Ç.")
        return

    text = "üü¢ –û–Ω–ª–∞–π–Ω –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏:\n\n"
    for uid in online:
        text += f"‚Ä¢ <a href='tg://user?id={uid}'>{uid}</a>\n"
    bot.send_message(ADMIN_ID, text, parse_mode="HTML")

# ------------------- –ö–û–ú–ê–ù–î–´ –î–õ–Ø –£–ü–†–ê–í–õ–ï–ù–ò–Ø –ü–û–õ–¨–ó–û–í–ê–¢–ï–õ–ï–ú -------------------
@bot.message_handler(func=lambda msg: msg.chat.id == ADMIN_ID and msg.text.isdigit())
def admin_user_control(message):
    user_id = int(message.text)
    markup = types.InlineKeyboardMarkup()
    markup.add(types.InlineKeyboardButton("üîí –ó–∞–±–∞–Ω–∏—Ç—å", callback_data=f"ban_{user_id}"))
    markup.add(types.InlineKeyboardButton("üîì –†–∞–∑–±–∞–Ω–∏—Ç—å", callback_data=f"unban_{user_id}"))
    markup.add(types.InlineKeyboardButton("‚≠ê –í—ã–¥–∞—Ç—å VIP", callback_data=f"vip_{user_id}"))
    bot.send_message(ADMIN_ID, f"‚öôÔ∏è –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º <code>{user_id}</code>",
                     parse_mode="HTML", reply_markup=markup)

# ------------------- –û–ë–†–ê–ë–û–¢–ö–ê –ö–ù–û–ü–û–ö -------------------
@bot.callback_query_handler(func=lambda call: call.data.startswith(("ban_", "unban_", "vip_")))
def callback_admin(call):
    action, uid = call.data.split("_")
    user_id = int(uid)

    if action == "ban":
        blocked_users[user_id] = datetime.datetime.now() + datetime.timedelta(days=1)
        bot.send_message(ADMIN_ID, f"‚úÖ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {user_id} –∑–∞–±–∞–Ω–µ–Ω –Ω–∞ 1 –¥–µ–Ω—å")
        bot.send_message(user_id, "‚õî –¢—ã –±—ã–ª –∑–∞–±–∞–Ω–µ–Ω –∞–¥–º–∏–Ω–æ–º –Ω–∞ 1 –¥–µ–Ω—å.")
    elif action == "unban":
        blocked_users.pop(user_id, None)
        bot.send_message(ADMIN_ID, f"‚úÖ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {user_id} —Ä–∞–∑–±–∞–Ω–µ–Ω")
        bot.send_message(user_id, "‚úÖ –ê–¥–º–∏–Ω —Å–Ω—è–ª —Å —Ç–µ–±—è –±–∞–Ω.")
    elif action == "vip":
        vip_users[user_id] = {"until": None, "status": "forever"}
        bot.send_message(ADMIN_ID, f"‚≠ê –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é {user_id} –≤—ã–¥–∞–Ω VIP –Ω–∞–≤—Å–µ–≥–¥–∞")
        bot.send_message(user_id, "üéâ –¢–µ–±–µ –∞–¥–º–∏–Ω –≤—ã–¥–∞–ª VIP –Ω–∞–≤—Å–µ–≥–¥–∞!")

# ------------------- –í–´–•–û–î –ò–ó –ê–î–ú–ò–ù-–ü–ê–ù–ï–õ–ò -------------------
@bot.message_handler(func=lambda msg: msg.chat.id == ADMIN_ID and msg.text == "‚¨ÖÔ∏è –í—ã–π—Ç–∏")
def admin_exit(message):
    markup = types.ReplyKeyboardMarkup(resize_keyboard=True)
    pay_btn = types.KeyboardButton("üí≥ –û–ø–ª–∞—Ç–∏—Ç—å VIP")
    help_btn = types.KeyboardButton("‚ÑπÔ∏è –ü–æ–º–æ—â—å")
    search_btn = types.KeyboardButton("üîé –ü–æ–∏—Å–∫ —Å–æ–±–µ—Å–µ–¥–Ω–∏–∫–∞")
    stop_btn = types.KeyboardButton("‚õî –°—Ç–æ–ø")
    markup.add(search_btn, pay_btn, help_btn, stop_btn)
    bot.send_message(ADMIN_ID, "‚Ü©Ô∏è –¢—ã –≤—ã—à–µ–ª –∏–∑ –∞–¥–º–∏–Ω-–ø–∞–Ω–µ–ª–∏", reply_markup=markup)

# ------------------- –ê–ù–¢–ò–ú–ê–¢ + –ß–ê–¢ -------------------
@bot.message_handler(func=lambda msg: True)
def chat_handler(message):
    user_id = message.chat.id

    # –∞–Ω—Ç–∏-–º–∞—Ç –∏ —Å—Å—ã–ª–∫–∏
    text = (message.text or "").lower()
    if not is_vip(user_id):
        if any(word in text for word in bad_words) or "http" in text or ".ru" in text or ".com" in text:
            blocked_users[user_id] = datetime.datetime.now() + datetime.timedelta(days=1)
            bot.send_message(user_id, "üö´ –ù–∞—Ä—É—à–µ–Ω–∏–µ! –¢—ã –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω –Ω–∞ 1 –¥–µ–Ω—å.")
            return

    # –µ—Å–ª–∏ –≤ —á–∞—Ç–µ
    if user_id in chat_pairs:
        partner_id = chat_pairs[user_id]
        prefix = "üëë –ê–¥–º–∏–Ω: " if user_id == ADMIN_ID else ""
        bot.send_message(partner_id, prefix + message.text)

# ------------------- –ó–ê–ü–£–°–ö -------------------
print("–ë–æ—Ç –∑–∞–ø—É—â–µ–Ω...")
bot.infinity_polling()
